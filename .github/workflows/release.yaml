name: Release Version

on:
  workflow_run:
    workflows:
      - Run Tests
    branches:
      - main
    types:
      - completed

jobs:
  tag:
    name: üè∑ Create a tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - id: tag-without-v
        name: Get version without v
        uses: anothrNick/github-tag-action@1.34.0
        env:
          WITH_V: false
          DRY_RUN: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main

      - id: tag-with-v
        name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main

    outputs:
      tag: ${{ steps.tag-with-v.outputs.new_tag }}
      tag_without_v: ${{ steps.tag-without-v.outputs.new_tag }}

  release-server:
    name: üì¶ Release server
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: stable
          override: true

      - name: Download build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}-
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc_hash }}-

      - name: Build
        run: |
          cargo build --release --bin=cablescout-server
          mv ./target/release/cablescout-server{,-linux-x86_64}

      - name: Upload assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ needs.tag.outputs.tag }}
          draft: true
          tag_name: ${{ needs.tag.outputs.tag }}
          files: |
            ./target/release/cablescout-server-*

  release-macos-app:
    name: üì¶ Release MacOS App
    needs: tag
    runs-on: macos-latest
    env:
      NODEJS_VERSION: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        id: setup-node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: actions/cache@v2
        with:
          path: |
            app/node_modules
          key: ${{ runner.os }}-nodejs-${{ env.NODEJS_VERSION }}-${{ hashFiles('app/yarn.lock') }}-
          restore-keys: |
            ${{ runner.os }}-nodejs-${{ env.NODEJS_VERSION }}-

      - name: Install node modules
        run: |
          cd app
          yarn install

      - name: Set version
        run: |
          cd app
          yarn version --no-git-tag-version --new-version ${{ needs.tag.outputs.tag_without_v }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: Build
        run: |
          cd app
          yarn build

      - name: Build Electron app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
        run: |
          cd app
          ./node_modules/.bin/electron-forge publish

  release-windows-app:
    name: üì¶ Release Windows App
    needs: tag
    runs-on: windows-latest
    env:
      NODEJS_VERSION: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        id: setup-node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: actions/cache@v2
        with:
          path: |
            app/node_modules
          key: ${{ runner.os }}-nodejs-${{ env.NODEJS_VERSION }}-${{ hashFiles('app/yarn.lock') }}-
          restore-keys: |
            ${{ runner.os }}-nodejs-${{ env.NODEJS_VERSION }}-

      - name: Install node modules
        run: |
          cd app
          yarn install

      - name: Set version
        run: |
          cd app
          yarn version --no-git-tag-version --new-version ${{ needs.tag.outputs.tag_without_v }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: Build
        run: |
          cd app
          yarn build

      - name: Build Electron app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          CSC_LINK: ${{ secrets.WINDOWS_CERTS }}
#          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTS_PASSWORD }}
        run: |
          cd app
          ./node_modules/.bin/electron-forge publish

  publish-release:
    name: üöÄ Publish Release
    needs:
      - tag
      - release-server
      - release-macos-app
      - release-windows-app
    runs-on: ubuntu-latest
    steps:
      - name: Publish release
        run: |
          release_url=$(
            curl --fail \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases" |
              jq -r '.[] | select(.tag_name == "${{ needs.tag.outputs.tag }}") | .url'
          )
          curl --fail \
            -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${release_url}" \
            -d '{"draft":false}'
